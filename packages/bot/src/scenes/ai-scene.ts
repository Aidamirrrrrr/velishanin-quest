import Groq from 'groq-sdk'
import { Scenes, Markup } from 'telegraf'

import { config } from '../config'

const groq = new Groq({
    apiKey: config.GROQ_API_KEY,
})

interface AISessionData extends Scenes.SceneSessionData {
    waitingForQuestion: boolean
}

export const aiScene = new Scenes.BaseScene<Scenes.SceneContext<AISessionData>>('ai')

aiScene.enter(async (ctx) => {
    ctx.scene.session.waitingForQuestion = true
    await ctx.reply(
        'ü§ñ –ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é:\n\n' +
        '–ù–∞–ø—Ä–∏–º–µ—Ä:\n' +
        '‚Ä¢ –ß—Ç–æ —Ç–∞–∫–æ–µ TypeScript?\n' +
        '‚Ä¢ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç async/await?\n' +
        '‚Ä¢ –í —á—ë–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É map –∏ forEach?',
        Markup.inlineKeyboard([[Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_ai')]])
    )
})

aiScene.on('text', async (ctx) => {
    if (!ctx.scene.session.waitingForQuestion) {
        return
    }

    const question = ctx.message.text

    await ctx.reply('ü§î –î—É–º–∞—é...')

    try {
        const completion = await groq.chat.completions.create({
            model: "llama-3.1-8b-instant",
            messages: [
                {
                    role: 'system',
                    content: '–¢—ã - –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫. –û–±—ä—è—Å–Ω—è–π –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∫–æ–¥–∞. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.',
                },
                {
                    role: 'user',
                    content: question,
                },
            ],
            max_tokens: 500,
            temperature: 0.7,
        })

        const answer = completion.choices[0]?.message?.content || '–ò–∑–≤–∏–Ω–∏, –Ω–µ —Å–º–æ–≥ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç.'

        await ctx.reply(
            `üí° ${answer}`,
            Markup.inlineKeyboard([
                [Markup.button.callback('‚ùì –ó–∞–¥–∞—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å', 'ask_more')],
                [Markup.button.callback('‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_menu')],
            ])
        )

        ctx.scene.session.waitingForQuestion = false
    } catch (error: unknown) {
        console.error('OpenAI Error:', error)

        let errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI.'

        if (error && typeof error === 'object' && 'code' in error) {
            if (error.code === 'insufficient_quota') {
                errorMessage = '–ö–≤–æ—Ç–∞ OpenAI –∏—Å—á–µ—Ä–ø–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
            } else if (error.code === 'invalid_api_key') {
                errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á OpenAI.'
            }
        }

        await ctx.reply(`‚ùå ${errorMessage}`, Markup.inlineKeyboard([[Markup.button.callback('‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back_to_menu')]]))

        return ctx.scene.leave()
    }
})

aiScene.action('ask_more', async (ctx) => {
    await ctx.answerCbQuery()
    ctx.scene.session.waitingForQuestion = true
    await ctx.reply('–ó–∞–¥–∞–π —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:', Markup.inlineKeyboard([[Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_ai')]]))
})

aiScene.action('cancel_ai', async (ctx) => {
    await ctx.answerCbQuery('–û—Ç–º–µ–Ω–µ–Ω–æ')
    await ctx.reply('–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...')
    return ctx.scene.leave()
})

aiScene.action('back_to_menu', async (ctx) => {
    await ctx.answerCbQuery()
    await ctx.reply('–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...')
    return ctx.scene.leave()
})

export default aiScene
