import { useState, useMemo } from 'react'

import { FilterButtons } from './filter-buttons'
import { Footer } from './footer'
import { Header } from './header'
import { LeaderItem } from './leader-item'
import { UserRankCard } from './user-rank-card'

import type { LeaderboardItem, FilterType } from '@/types'

import { ErrorState, Spinner, Button } from '@/components/ui'
import { useLeaderboard } from '@/hooks/use-leaderboard'
import useTelegramStore from '@/stores/use-telegram-store'

export default function Leaderboard() {
    const [filter, setFilter] = useState<FilterType>('all')

    const { user } = useTelegramStore()

    const { data: leaders = [], isLoading, isError, error, refetch } = useLeaderboard(10)

    const userRank = useMemo(() => {
        if (!user || !leaders.length) return null
        const found = leaders.find((leader: LeaderboardItem) => leader.user.id === user.id)
        return found ? found.rank : null
    }, [user, leaders])

    if (isLoading) {
        return (
            <div className="flex items-center justify-center min-h-screen">
                <Spinner />
            </div>
        )
    }

    if (isError) {
        return (
            <ErrorState
                emoji="üòï"
                title="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏"
                message={error?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'}
                action={<Button onClick={() => refetch()}>üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</Button>}
                hint="üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ API –¥–æ—Å—Ç—É–ø–Ω–æ"
            />
        )
    }

    if (leaders.length === 0) {
        return <ErrorState emoji="üèÜ" title="–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞" message={`–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ—à—ë–ª –∫–≤–µ—Å—Ç.\n–ë—É–¥—å –ø–µ—Ä–≤—ã–º! üöÄ`} />
    }

    return (
        <div className="max-w-2xl mx-auto p-4 animate-fade-in">
            <Header />

            {userRank && <UserRankCard rank={userRank} score={leaders.find((l) => l.rank === userRank)?.totalPoints || 0} />}

            <FilterButtons filter={filter} onFilterChange={setFilter} />

            <div className="space-y-2">
                {leaders.map((leader: LeaderboardItem, index: number) => (
                    <LeaderItem key={leader.user.id} leader={leader} index={index} isCurrentUser={user?.id === leader.user.id} />
                ))}
            </div>

            <Footer />
        </div>
    )
}
